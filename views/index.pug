extends layout

block content
  div#sm_player.jp-jplayer

  h1= title
  p.sub_title #{title} is AI-generated music service
  br
  p.sub_title Sample music (pre-generated)
  button(onclick="onClickPlayMusic()")
    font(size="3rem") [PLAY]
  button(onclick="onClickStopMusic()")
    font(size="3rem") [STOP]
  br
  br
  p.ai_link(onclick="onClickLoadMusic()")
    font(size="5rem") [CLICK to play AI Generated Music]


  //- form(id="form1" name="form1" method="post" action="/helo" onsubmit="return false;"> <input type="text" id="input1" name="input1" value="<%= input %>"> <input type="button" id="btn" value="click" onclick="doAction();"> </form> </body>



  script.
    function onClickPlayMusic() {
      $("#sm_player").jPlayer("play");
    }

    function onClickStopMusic() {
      $("#sm_player").jPlayer("stop");
    }

    function onClickLoadMusic() {
      var user_uid = "";
      $("#sm_player").jPlayer("stop");
      $("#sm_player").jPlayer("setMedia",
        {
          title: ""
        }
      );
      $.post("/users/register", (data) => {
          user_uid = (data.result) ? data.id : 0;
        }, "json"
      ).done(() => {
        //alert("user_uid = " + user_uid);
        $.get("/users/" + user_uid, (data) => {
            //alert("[1] " + data.title + " [2] " + data.file_name);
            setTimeout((in_title, in_file_name) => {
              $("#sm_player").jPlayer("setMedia",
                {
                  title: in_title,
                  m4a: in_file_name
                }
              );
              $("#sm_player").jPlayer("play");
            }, 200, data.title, data.file_name);
          }, "json");
        }
      ).fail(() => {
          alert("onClickPlayMusic() failed");
        }
      ).always(() => {
          // alert("finished");
        }
      );
    }

  script.
    $(document).ready(() => {
      $("#sm_player").jPlayer(
        {
          ready:function(event)
          {
            $(this).jPlayer(
              "setMedia",
              {
                title: "Reference song by AI",
                m4a: "sounds/AI_generated_chill_music.mp3",
              }
            );
          },
          play: function() { // To avoid multiple jPlayers playing together.
            $(this).jPlayer("pauseOthers");
          },            
          errorAlerts: true,
          swfPath: "http://jplayer.org/latest/dist/jplayer",
          supplied: "m4a",
          wmode: "window",
          solution: "html",
          useStateClassSkin: true,
          autoBlur: false,
          smoothPlayBar: true,
          keyEnabled: true,
          remainingDuration: true,
          toggleDuration: true
        }
      );
    });                                      

  script.
    var ajax = null;

    function doAction() {
      var input = document.getElementById("input1");
      var callback = function() {
        var target = document.getElementById("msg");
        var res = JSON.parse(ajax.getResponse());
        target.textContent = "you send::" + res.msg;
      }
      
      ajax = new AjaxObject('/helo?input1=' + input.value,callback);
    }
    
    function AjaxObject(url,callback) {
      var response = null;
      var callback = callback;
      ajaxStart(url);
      this.getResponse = function() {
        return response;
      }
      
      function ajaxStart(url) {
        var req = createRequest();
        if (req == null) {
          alert("実行できません！");
          return;
        }
        req.open("POST",url);
        req.setRequestHeader ("User-Agent","XMLHttpRequest");
        req.onreadystatechange = function() {
          if (this.readyState == 4 && this.status == 200) {
            precallback(this);
          }
        }
        req.send();
      }
      
      function createRequest() {
        var httplist = [
          function() {
            return new XMLHttpRequest();
          }, function() {
            return new ActiveXObjct("Msxml2.XMLHTTP");
          }, function() {
            return new ActiveXObject("Microsoft.XMLHTTP");
          }
        ];

        for (var i = 0; i < httplist.length; i++) {
          try {
            var http = httplist[i]();
            if (http != null)
              return http;
          }
          catch(e) {
            continue;
          }
        }
        return null;
      }
      
      function precallback(request) {
        response = request.responseText; callback();
      }
    }
